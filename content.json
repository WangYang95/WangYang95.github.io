[{"title":"Git的简单使用","date":"2017-07-10T14:43:28.000Z","path":"2017/07/10/Git的简单使用/","text":"Git简介Git是一个先进的分布式版本控制系统，拥有快速、简单、分布式和允许并行的优点。 Git 安装在Linux中，可以先使用git命令查看是否已经安装。如果没有安装会有友好的提示。在Ubuntu中，可以使用sudo apt-get install git命令直接完成Git的安装；如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好了。在Mac OS中，直接从AppStore安装并运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。在Windows中，可以从https://git-for-windows.github.io下载安装。使用Git时需要每个机器自报家门，因此安装完成后，需要在命令行中输入如下命令： git config --global user.name &quot;姓名&quot; git config --global user.email &quot;邮箱&quot; Git使用创建版本库版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。首先，我们可以使用任何方法创建一个空目录，之后使用命令行进入这个目录，并输入命令git init,这样能够使用git管理的仓库就建立好了。 添加文件Git只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等。Git记录文本文件的每次的改动；而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但不知道具体信息。要真正使用版本控制系统，就要以纯文本方式编写文件。另外，因为文本是有编码的，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。Git版本控制系统中，文件存在三种状态：已提交、已暂存和已修改。将编写完成的文件保存到Git仓库目录下，就已经处于已修改状态使用git add 文件命令，将文件添加进仓库，此时处于已暂存状态。如果使用git add .命令，即将发生改动的所有文件添加到仓库。使用git commit -m &quot;说明&quot;命令即可将文件提交到仓库，此时处于已提交状态。 添加远程仓库在添加远程仓库前，需要生成自己的SSH KEY。使用ssh-keygen -t rsa -C &quot;邮箱地址&quot;，来生成自己的公钥id_rsa.pub和私钥id_rsa。以使用GitHub为例，需要将公钥的所有内容添加到GitHub的“Account settings”——“SSH Keys”中。接着，需要在GitHub中创建一个空的远程库，等待关联。接下来需要关联远程库，使用命令git remote add origin git@github.com:GitHub的用户名/仓库名.git；关联后，使用命令git push -u origin master第一次推送master分支的所有内容；此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改。 克隆远程库如果现有远程库，之后再克隆到本地，那会方便得多。远程库已经准备好的情况下，使用命令git clone 路径来克隆库。路径可以使用https方式和SSH方式。使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令；而设置好SSH协议和公钥后，SSH更快更方便。 分支Git鼓励大量使用分支：查看分支：git branch创建分支：git branch 分支名切换分支：git checkout 分支名创建+切换分支：git checkout -b 分支名合并某分支到当前分支：git merge 分支名删除分支：git branch -d 分支名 本地更新在绑定或克隆库之后，我们可以使用git pull来进行更新。但在多人协作时，可能会在更新本地时出现冲突。当出现冲突时，我们应当手动修改冲突文件并重新提交。 分支冲突合并分支时也有可能出现冲突。Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======和&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容。当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成删除不需要的分支。 版本控制Git中有一个HEAD指针，它指向的版本就是当前版本。因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard 提交id即可。穿梭前，用git log可以查看提交历史，以便确定要回滚到哪个版本。要重返未来，用git reflog查看命令历史，以便确定要恢复到哪个版本。 Git还具有许多功能，可以查看参考获得更多资料 参考资料 廖雪峰.Git教程","tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"}]},{"title":"vim的简单使用","date":"2017-07-07T14:59:43.000Z","path":"2017/07/07/vim的简单使用/","text":"简介vim是功能强大的跨平台文本文件编辑工具，继承和发展自Unix系统的Vi编辑器，支持Linux/Mac OS X/Windows系统，利用它可以建立、修改文本文件。 基础在Bash中，使用vim 文档路径命令可以使用vim打开文档。 文档打开后即处于vim的Normal模式 如果要编辑文件，即进入Insert模式，需要按下i键 按下i键后即可输入文本，如同“记事本”一样，光标的移动可以使用键盘上的方向键 如果需要返回Normal模式，需要按下ESC 除去上述命令外，在Normal模式下也有许多重要的命令，如下表所示： |按键|操作| |-|-| |x|删当前光标所在的一个字符| |dd|删除当前行，并存入剪切板| |p|粘贴| |:q!并回车|直接退出| |:wq并回车|保存并退出| 进阶在VIM的Normal模式下，所有的键就是功能键。以下命令均在Normal模式下生效。 vim存在多种插入模式 |按键|操作| |-|-| |a|在光标后插入| |o|在当前行后插入一个新行| |O|在当前行前插入一个新行| |cw|替换从光标所在位置后到一个单词结尾的字符| 光标移动 |按键|操作| |-|-| |0|行最前| |^|本行第一个不是blank字符| |$|本行尾| |g_|本行最后一个不是blank字符| |/|搜索字符串，若多个匹配可按n键到下一个| 复制/粘贴 |按键|操作| |-|-| |p|粘贴| |yy|复制当前行| 撤销/重复 |按键|操作| |-|-| |u|撤销| |ctrl+r|重做| 文件操作 |按键|操作| |-|-| |:e &lt;文件路径&gt;|打开文件| |:w|保存| |:saveas &lt;文件路径&gt; |另存为| |:q!|退出不保存| |:qa!|强行退出所有的正在编辑的文件| |:bn 和 :bp |同时打开多文件时，这两个命令切换下一个或上一个文件| 再进阶 重复 按下小数点.可以重复上一次命令；按下N可以重复N次命令。 移动 按下NG可移动N行；按下gg移动到第一行；按下G移动到最后一行；按下%可匹配括号移动（需满足光标在括号上）；按下*或#可使光标移动到下一个或上一个匹配的单词。 快速命令 很多命令都可以和这些移动光标的命令连动可以使用形如的方式来执行多条命令。 例如，0y$表示移动到行首，拷贝到本行最后一个字符；ye表示从当前位置拷贝到本单词最后一个字符。 参考资料 陈皓.简明 Vim 练级攻略","tags":[{"name":"vim","slug":"vim","permalink":"http://yoursite.com/tags/vim/"}]},{"title":"markdown的基本语法","date":"2017-07-06T13:24:33.000Z","path":"2017/07/06/markdown的基本语法/","text":"简介 Markdown 是一种轻量级「标记语言」，它用简洁的用「标记」语法，来代替常见的排版格式。 语法的简要规则标题如果一段文字被定义为标题，只要在这段文字前加#号，并在#号后加一个空格即可。 # 一级标题 ## 二级标题 ### 三级标题 以此类推，总共六级标题。 列表列表分为有序列表和无序列表。无序列表使用*、+或-来做为列表的标记；有序列表则是使用数字紧接着.作为列表的标记。例如： - one - two - three 被识别为： one two three 链接Markdown支持行内和参考两种形式。行内形式为： [文本显示的内容](链接)，例如：This is an example link.参考形式可以为链接定一个名称，之后在文件的其他地方定义该链接的内容，例如： 常用的搜索引擎有：[Google][1]、[百度][2]和[Bing][3]。 [1]: https://www.google.com/ [2]: https://www.baidu.com/ [3]: https://cn.bing.com/ 这会显示为：常用的搜索引擎有： Google、百度和Bing。 图片图片的语法与链接相似，是在前面添加!。行内形式为：![图片标题](图片路径)；参考形式为：![图片标题][图片id]，之后在文档的某一处添加：[图片id]: 图片路径。 代码在一段文字中，随时可以使用一对反引号来表示代码。如果显示多行代码，仅需在每行均缩进4个空格或一个tab即可。 引用、修辞与强调文字的引用可以使用&gt;来标识。Markdown还支持多级引用，有几级就使用几个&gt;即可。Markdown支持文字的斜体与粗体。一对处于文字两端的*或_可以表示斜体；两对处于文字两端的*或_可以表示粗体。例如：*斜体*和**粗体**将会显示为：斜体 和 粗体。 表格表格的语法比较复杂，例如： |表头1|表头2|表头3| |-|:-:|-:| |1|1|1| |2|2|2|将显示为： 表头1 表头2 表头3 1 1 1 2 2 2 第一行是表头；第二行设置格式并将表头与表内容隔开，其中-为左对齐、:-:为居中、-:为右对齐；第三行起为表项。表的每一列用|隔开。 参考资料 riku.Markdown: Basics （快速入门） Te_Lee.Markdown——入门指南","tags":[{"name":"markdown","slug":"markdown","permalink":"http://yoursite.com/tags/markdown/"}]},{"title":"Hello World","date":"2017-07-01T14:29:48.098Z","path":"2017/07/01/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]